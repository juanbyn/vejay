{"version":3,"sources":["../src/core/Dictionary.ts","../src/core/EventDispatcher.ts","../src/core/base/Font.ts","../src/global/GlobalData.ts","../src/math/Rectangle.ts","../src/display/DisplayObjectContainer.ts","../src/display/DisplayObject.ts","../src/display/Stage.ts","../src/core/Vo.ts","../src/display/RenderContext.ts","../src/global/GlobalFunc.ts","../src/manager/FrameManager.ts","../src/math/Matrix.ts","../src/math/Point.ts","../src/utils/NumberUtils.ts","../src/core/base/Init.ts","../src/display/component/VImage.ts"],"names":[],"mappings":"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","file":"vejay.js","sourcesContent":["/**\r\n * Created by cjb on 2018-05-01\r\n */\r\nmodule core {\r\n    export class Dictionary {\r\n        private _obj: Object = {};\r\n        \r\n        public get keys(): Array<string> {\r\n            var arr = [];\r\n            for (var key in this._obj) {\r\n                arr.push(key);\r\n            }\r\n            return arr;\r\n        }\r\n        \r\n        public get values(): Array<any> {\r\n            var arr = [];\r\n            // for (var value of this._obj) {\r\n            //     arr.push(value);\r\n            // }\r\n            for (var key in this._obj) {\r\n                arr.push(this._obj[key]);\r\n            }\r\n            return arr;\r\n        }\r\n        \r\n        public set(key: string, value: any): void {\r\n            this._obj[key] = value;\r\n        }\r\n        \r\n        public get(key: string): any {\r\n            var value = this._obj[key];\r\n            if (value !== undefined) {\r\n                return value;\r\n            }\r\n            return null;\r\n        }\r\n        \r\n        public has(key: string): boolean {\r\n            return this._obj.hasOwnProperty(key);\r\n        }\r\n        \r\n        public remove(key: string): void {\r\n            delete this._obj[key];\r\n        }\r\n        \r\n        public clear(): void {\r\n            this._obj = {};\r\n        }\r\n        \r\n    }\r\n}\r\n","/**\r\n * Created by cjb on 2018-05-01\r\n */\r\nmodule core {\r\n    export class EventDispatcher {\r\n        private static _list: Dictionary = new Dictionary(); // key:事件名称 , value: [执行域, 方法, 参数, 是否只执行一次]\r\n        \r\n        /**\r\n         * 添加事件监听\r\n         * @param {string} name 事件名称\r\n         * @param caller 执行域\r\n         * @param {Function} method 方法\r\n         * @param {Array<any>} args [参数]\r\n         * @param {boolean} once 是否只执行一次\r\n         */\r\n        public addEventListener(name: string, caller: any, method: Function, args: Array<any>, once: boolean = false): void {\r\n            var events: any = EventDispatcher._list.get(name);\r\n            var e;\r\n            if (!events) {\r\n                events = [];\r\n            }\r\n            for (var i = 0; i < events.length; i++) {\r\n                e = events[i];\r\n                if (method === e[1]) {\r\n                    return;\r\n                }\r\n            }\r\n            events.push([caller, method, args, once]);\r\n        }\r\n        \r\n        /** 删除事件监听 */\r\n        public removeEventListener(name: string, caller: any, method: Function): void {\r\n            var events: Array<any> = EventDispatcher._list.get(name);\r\n            var e;\r\n            \r\n            for (var i = 0; i < events.length; i++) {\r\n                e = events[i];\r\n                if (method === e[1]) {\r\n                    events.splice(i, 1);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        \r\n        /** 删除事件全部监听 */\r\n        public removeEventListeners(name: string): void {\r\n            EventDispatcher._list.remove(name);\r\n        }\r\n        \r\n        /** 执行 */\r\n        public static dispatch(name: string) {\r\n            var events: Array<any> = this._list.get(name);\r\n            var e: Array<any>;\r\n            var caller: any;\r\n            var method: Function;\r\n            var args: Array<any>;\r\n            \r\n            for (var i = 0; i < events.length; i++) {\r\n                e = events[i];\r\n                caller = e[0];\r\n                method = e[1];\r\n                args = e[2];\r\n                \r\n                method.apply(caller, args);\r\n                \r\n                if (e[3]) {\r\n                    events.splice(i--, 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","/**\r\n * Created by cjb on 2018-05-01\r\n */\r\nmodule core.base {\r\n    export class Font {\r\n        private static _instance: Font;\r\n        \r\n        public static get instance(): Font {\r\n            if (!this._instance) {\r\n                if (GlobalData.CtxType === 1) {\r\n                    this._instance = new FontCanvas();\r\n                } else {\r\n                    this._instance = new FontWebGL();\r\n                }\r\n            }\r\n            return this._instance;\r\n        }\r\n        \r\n        public setFont(str: string) {\r\n        }\r\n        \r\n    }\r\n    \r\n    export class FontCanvas extends Font {\r\n        public setFont(str: string) {\r\n            var ctx = GlobalData.Ctx1;\r\n            ctx.font = str;\r\n            ctx.save();\r\n        }\r\n    }\r\n    \r\n    \r\n    export class FontWebGL extends Font {\r\n    \r\n    }\r\n}\r\n","/**\r\n * Created by cjb on 2018-04-29\r\n */\r\nmodule common {\r\n    export class GlobalData {\r\n        public static ScreenWidth: number;\r\n        public static ScreenHeight: number;\r\n        public static StageWidth: number;\r\n        public static StageHeight: number;\r\n        \r\n        public static Ctx0: WebGLRenderingContext;\r\n        public static Ctx1: CanvasRenderingContext2D;\r\n        public static CtxType: number = 0; // 0:webGL 1:canvas\r\n    }\r\n}","module math {\r\n\r\n    let rectanglePool: Rectangle[] = [];\r\n\r\n    /**\r\n     * Rectangle 对象是按其位置（由它左上角的点 (x, y) 确定）以及宽度和高度定义的区域。<br/>\r\n     * Rectangle 类的 x、y、width 和 height 属性相互独立；更改一个属性的值不会影响其他属性。\r\n     * 但是，right 和 bottom 属性与这四个属性是整体相关的。例如，如果更改 right 属性的值，则 width\r\n     * 属性的值将发生变化；如果更改 bottom 属性，则 height 属性的值将发生变化。\r\n     */\r\n    export class Rectangle {\r\n\r\n        /**\r\n         * 释放一个Rectangle实例到对象池\r\n         */\r\n        public static release(rect: Rectangle): void {\r\n            if (!rect) {\r\n                return;\r\n            }\r\n            rectanglePool.push(rect);\r\n        }\r\n\r\n        /**\r\n         * 从对象池中取出或创建一个新的Rectangle对象。\r\n         */\r\n        public static create(): Rectangle {\r\n            let rect = rectanglePool.pop();\r\n            if (!rect) {\r\n                rect = new Rectangle();\r\n            }\r\n            return rect;\r\n        }\r\n\r\n        public x: number;\r\n        public y: number;\r\n        public width: number;\r\n        public height: number;\r\n\r\n        public constructor(x: number = 0, y: number = 0, width: number = 0, height: number = 0) {\r\n            this.x = x;\r\n            this.y = y;\r\n            this.width = width;\r\n            this.height = height;\r\n        }\r\n\r\n        /**\r\n         * x 和 width 属性的和。\r\n         */\r\n        public get right(): number {\r\n            return this.x + this.width;\r\n        }\r\n\r\n        public set right(value: number) {\r\n            this.width = value - this.x;\r\n        }\r\n\r\n        /**\r\n         * y 和 height 属性的和。\r\n         */\r\n        public get bottom(): number {\r\n            return this.y + this.height;\r\n        }\r\n\r\n        public set bottom(value: number) {\r\n            this.height = value - this.y;\r\n        }\r\n\r\n        /**\r\n         * 矩形左上角的 x 坐标。更改 Rectangle 对象的 left 属性对 y 和 height 属性没有影响。但是，它会影响 width 属性，而更改 x 值不会影响 width 属性。\r\n         * left 属性的值等于 x 属性的值。\r\n         */\r\n        public get left(): number {\r\n            return this.x;\r\n        }\r\n\r\n        public set left(value: number) {\r\n            this.width += this.x - value;\r\n            this.x = value;\r\n        }\r\n\r\n        /**\r\n         * 矩形左上角的 y 坐标。更改 Rectangle 对象的 top 属性对 x 和 width 属性没有影响。但是，它会影响 height 属性，而更改 y 值不会影响 height 属性。<br/>\r\n         * top 属性的值等于 y 属性的值。\r\n         */\r\n        public get top(): number {\r\n            return this.y;\r\n        }\r\n\r\n        public set top(value: number) {\r\n            this.height += this.y - value;\r\n            this.y = value;\r\n        }\r\n\r\n        /**\r\n         * 由该点的 x 和 y 坐标确定的 Rectangle 对象左上角的位置。\r\n         */\r\n        public get topLeft(): Point {\r\n            return new Point(this.left, this.top);\r\n        }\r\n\r\n        public set topLeft(value: Point) {\r\n            this.top = value.y;\r\n            this.left = value.x;\r\n        }\r\n\r\n        /**\r\n         * 由 right 和 bottom 属性的值确定的 Rectangle 对象的右下角的位置。\r\n         */\r\n        public get bottomRight(): Point {\r\n            return new Point(this.right, this.bottom);\r\n        }\r\n\r\n        public set bottomRight(value: Point) {\r\n            this.bottom = value.y;\r\n            this.right = value.x;\r\n        }\r\n\r\n        /**\r\n         * 将源 Rectangle 对象中的所有矩形数据复制到调用方 Rectangle 对象中。\r\n         * @param sourceRect 要从中复制数据的 Rectangle 对象。\r\n         */\r\n        public copyFrom(sourceRect: Rectangle): Rectangle {\r\n            this.x = sourceRect.x;\r\n            this.y = sourceRect.y;\r\n            this.width = sourceRect.width;\r\n            this.height = sourceRect.height;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * 将 Rectangle 的成员设置为指定值\r\n         * @param x 矩形左上角的 x 坐标。\r\n         * @param y 矩形左上角的 y 坐标。\r\n         * @param width 矩形的宽度（以像素为单位）。\r\n         * @param height 矩形的高度（以像素为单位）。\r\n         */\r\n        public setTo(x: number, y: number, width: number, height: number): Rectangle {\r\n            this.x = x;\r\n            this.y = y;\r\n            this.width = width;\r\n            this.height = height;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * 确定由此 Rectangle 对象定义的矩形区域内是否包含指定的点。\r\n         * @param x 检测点的x轴\r\n         * @param y 检测点的y轴\r\n         * @returns 如果检测点位于矩形内，返回true，否则，返回false\r\n         */\r\n        public contains(x: number, y: number): boolean {\r\n            return this.x <= x &&\r\n                this.x + this.width >= x &&\r\n                this.y <= y &&\r\n                this.y + this.height >= y;\r\n        }\r\n\r\n        /**\r\n         * 如果在 toIntersect 参数中指定的 Rectangle 对象与此 Rectangle 对象相交，则返回交集区域作为 Rectangle 对象。如果矩形不相交，\r\n         * 则此方法返回一个空的 Rectangle 对象，其属性设置为 0。\r\n         * @param toIntersect 要对照比较以查看其是否与此 Rectangle 对象相交的 Rectangle 对象。\r\n         * @returns 等于交集区域的 Rectangle 对象。如果该矩形不相交，则此方法返回一个空的 Rectangle 对象；即，其 x、y、width 和\r\n         * height 属性均设置为 0 的矩形。\r\n         */\r\n        public intersection(toIntersect: Rectangle): Rectangle {\r\n            return this.clone().$intersectInPlace(toIntersect);\r\n        }\r\n\r\n        /**\r\n         * 按指定量增加 Rectangle 对象的大小（以像素为单位）\r\n         * 保持 Rectangle 对象的中心点不变，使用 dx 值横向增加它的大小，使用 dy 值纵向增加它的大小。\r\n         * @param dx Rectangle 对象横向增加的值。\r\n         * @param dy Rectangle 对象纵向增加的值。\r\n         */\r\n        public inflate(dx: number, dy: number): void {\r\n            this.x -= dx;\r\n            this.width += 2 * dx;\r\n            this.y -= dy;\r\n            this.height += 2 * dy;\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        $intersectInPlace(clipRect: Rectangle): Rectangle {\r\n            let x0 = this.x;\r\n            let y0 = this.y;\r\n            let x1 = clipRect.x;\r\n            let y1 = clipRect.y;\r\n            let l = Math.max(x0, x1);\r\n            let r = Math.min(x0 + this.width, x1 + clipRect.width);\r\n            if (l <= r) {\r\n                let t = Math.max(y0, y1);\r\n                let b = Math.min(y0 + this.height, y1 + clipRect.height);\r\n                if (t <= b) {\r\n                    this.setTo(l, t, r - l, b - t);\r\n                    return this;\r\n                }\r\n            }\r\n            this.setEmpty();\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * 确定在 toIntersect 参数中指定的对象是否与此 Rectangle 对象相交。此方法检查指定的 Rectangle\r\n         * 对象的 x、y、width 和 height 属性，以查看它是否与此 Rectangle 对象相交。\r\n         * @param toIntersect 要与此 Rectangle 对象比较的 Rectangle 对象。\r\n         * @returns 如果两个矩形相交，返回true，否则返回false\r\n         */\r\n        public intersects(toIntersect: Rectangle): boolean {\r\n            return Math.max(this.x, toIntersect.x) <= Math.min(this.right, toIntersect.right)\r\n                && Math.max(this.y, toIntersect.y) <= Math.min(this.bottom, toIntersect.bottom);\r\n        }\r\n\r\n        /**\r\n         * 确定此 Rectangle 对象是否为空。\r\n         * @returns 如果 Rectangle 对象的宽度或高度小于等于 0，则返回 true 值，否则返回 false。\r\n         */\r\n        public isEmpty(): boolean {\r\n            return this.width <= 0 || this.height <= 0;\r\n        }\r\n\r\n        /**\r\n         * 将 Rectangle 对象的所有属性设置为 0。\r\n         */\r\n        public setEmpty(): void {\r\n            this.x = 0;\r\n            this.y = 0;\r\n            this.width = 0;\r\n            this.height = 0;\r\n        }\r\n\r\n        /**\r\n         * 返回一个新的 Rectangle 对象，其 x、y、width 和 height 属性的值与原始 Rectangle 对象的对应值相同。\r\n         * @returns 新的 Rectangle 对象，其 x、y、width 和 height 属性的值与原始 Rectangle 对象的对应值相同。\r\n         */\r\n        public clone(): Rectangle {\r\n            return new Rectangle(this.x, this.y, this.width, this.height);\r\n        }\r\n\r\n        /**\r\n         * 确定由此 Rectangle 对象定义的矩形区域内是否包含指定的点。\r\n         * 此方法与 Rectangle.contains() 方法类似，只不过它采用 Point 对象作为参数。\r\n         * @param point 包含点对象\r\n         * @returns 如果包含，返回true，否则返回false\r\n         */\r\n        public containsPoint(point: Point): boolean {\r\n            if (this.x <= point.x\r\n                && this.x + this.width > point.x\r\n                && this.y <= point.y\r\n                && this.y + this.height > point.y) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * 确定此 Rectangle 对象内是否包含由 rect 参数指定的 Rectangle 对象。\r\n         * 如果一个 Rectangle 对象完全在另一个 Rectangle 的边界内，我们说第二个 Rectangle 包含第一个 Rectangle。\r\n         * @param rect 所检查的 Rectangle 对象\r\n         * @returns 如果此 Rectangle 对象包含您指定的 Rectangle 对象，则返回 true 值，否则返回 false。\r\n         */\r\n        public containsRect(rect: Rectangle): boolean {\r\n            let r1 = rect.x + rect.width;\r\n            let b1 = rect.y + rect.height;\r\n            let r2 = this.x + this.width;\r\n            let b2 = this.y + this.height;\r\n            return (rect.x >= this.x) && (rect.x < r2) && (rect.y >= this.y) && (rect.y < b2) && (r1 > this.x) && (r1 <= r2) && (b1 > this.y) && (b1 <= b2);\r\n        }\r\n\r\n        /**\r\n         * 确定在 toCompare 参数中指定的对象是否等于此 Rectangle 对象。\r\n         * 此方法将某个对象的 x、y、width 和 height 属性与此 Rectangle 对象所对应的相同属性进行比较。\r\n         * @param toCompare 要与此 Rectangle 对象进行比较的矩形。\r\n         * @returns 如果对象具有与此 Rectangle 对象完全相同的 x、y、width 和 height 属性值，则返回 true 值，否则返回 false。\r\n         */\r\n        public equals(toCompare: Rectangle): boolean {\r\n            if (this === toCompare) {\r\n                return true;\r\n            }\r\n            return this.x === toCompare.x && this.y === toCompare.y\r\n                && this.width === toCompare.width && this.height === toCompare.height;\r\n        }\r\n\r\n        /**\r\n         * 增加 Rectangle 对象的大小。此方法与 Rectangle.inflate() 方法类似，只不过它采用 Point 对象作为参数。\r\n         * @param point The x property of this Point object is used to increase the horizontal dimension of the Rectangle object. The y property is used to increase the vertical dimension of the Rectangle object.\r\n         */\r\n        public inflatePoint(point: Point): void {\r\n            this.inflate(point.x, point.y);\r\n        }\r\n\r\n        /**\r\n         * 按指定量调整 Rectangle 对象的位置（由其左上角确定）。\r\n         * @param dx 将 Rectangle 对象的 x 值移动此数量。\r\n         * @param dy 将 Rectangle 对象的 t 值移动此数量。\r\n         */\r\n        public offset(dx: number, dy: number): void {\r\n            this.x += dx;\r\n            this.y += dy;\r\n        }\r\n\r\n        /**\r\n         * 将 Point 对象用作参数来调整 Rectangle 对象的位置。此方法与 Rectangle.offset() 方法类似，只不过它采用 Point 对象作为参数。\r\n         * @param point 要用于偏移此 Rectangle 对象的 Point 对象。\r\n         */\r\n        public offsetPoint(point: Point): void {\r\n            this.offset(point.x, point.y);\r\n        }\r\n\r\n        /**\r\n         * 生成并返回一个字符串，该字符串列出 Rectangle 对象的水平位置和垂直位置以及高度和宽度。\r\n         * @returns 一个字符串，它列出了 Rectangle 对象的下列各个属性的值：x、y、width 和 height。\r\n         */\r\n        public toString(): string {\r\n            return \"(x=\" + this.x + \", y=\" + this.y + \", width=\" + this.width + \", height=\" + this.height + \")\";\r\n        }\r\n\r\n        /**\r\n         * 通过填充两个矩形之间的水平和垂直空间，将这两个矩形组合在一起以创建一个新的 Rectangle 对象。\r\n         * @param toUnion 要添加到此 Rectangle 对象的 Rectangle 对象。\r\n         * @returns 充当两个矩形的联合的新 Rectangle 对象。\r\n         */\r\n        public union(toUnion: Rectangle): Rectangle {\r\n            let result = this.clone();\r\n            if (toUnion.isEmpty()) {\r\n                return result;\r\n            }\r\n            if (result.isEmpty()) {\r\n                result.copyFrom(toUnion);\r\n                return result;\r\n            }\r\n            let l: number = Math.min(result.x, toUnion.x);\r\n            let t: number = Math.min(result.y, toUnion.y);\r\n            result.setTo(l, t,\r\n                Math.max(result.right, toUnion.right) - l,\r\n                Math.max(result.bottom, toUnion.bottom) - t);\r\n            return result;\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        $getBaseWidth(angle: number): number {\r\n            let u = Math.abs(Math.cos(angle));\r\n            let v = Math.abs(Math.sin(angle));\r\n            return u * this.width + v * this.height;\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        $getBaseHeight(angle: number): number {\r\n            let u = Math.abs(Math.cos(angle));\r\n            let v = Math.abs(Math.sin(angle));\r\n            return v * this.width + u * this.height;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * 仅供框架内复用，要防止暴露引用到外部。\r\n     */\r\n    export let $TempRectangle = new Rectangle();\r\n}","module display {\r\n    import EventDispatcher = core.EventDispatcher;\r\n    \r\n    export class DisplayObjectContainer extends EventDispatcher {\r\n        private _children: Array<DisplayObjectContainer> = [];\r\n        public parent: DisplayObjectContainer;\r\n        \r\n        constructor() {\r\n            super();\r\n        }\r\n        \r\n        public get numChildren(): number {\r\n            return this._children.length;\r\n        }\r\n        \r\n        public get children(): Array<DisplayObjectContainer> {\r\n            return this._children;\r\n        }\r\n        \r\n        public addChild(child: DisplayObjectContainer) {\r\n            child.parent = this;\r\n            this._children.push(child);\r\n        }\r\n        \r\n        public removeChild(child: DisplayObjectContainer): void {\r\n            var index = this.parent.getIndex(child);\r\n            this.parent.removeChildAt(index);\r\n        }\r\n        \r\n        public removeChildAt(index: number): DisplayObjectContainer {\r\n            if (index >= 0 && index < this._children.length) {\r\n                var child: DisplayObjectContainer = this._children[index];\r\n                child.parent = null;\r\n                //index = this._children.indexOf(child); // index might have changed by event handler\r\n                //if (index >= 0)\r\n                this._children.splice(index, 1);\r\n                // if (dispose) child.dispose();\r\n                return child;\r\n            } else {\r\n                throw new RangeError('Invalid child index');\r\n            }\r\n        }\r\n        \r\n        public getIndex(child: DisplayObjectContainer): number {\r\n            return this._children.indexOf(child);\r\n        }\r\n        \r\n        public removeAll() {\r\n            this._children.length = 0;\r\n        }\r\n        \r\n        public removeSelf(): void {\r\n            this.parent.removeChild(this);\r\n        }\r\n        \r\n    }\r\n}\r\n","module display {\r\n    import Rectangle = math.Rectangle;\r\n    \r\n    export class DisplayObject extends DisplayObjectContainer {\r\n        private _x: number = 0;\r\n        private _y: number = 0;\r\n        public posChange: boolean;\r\n        public width: number;\r\n        public height: number;\r\n        private _scaleX: number = 1;\r\n        private _scaleY: number = 1;\r\n        public scaleChange: boolean;\r\n        public pivotX: number = 0;\r\n        public pivotY: number = 0;\r\n        \r\n        protected _viewport: Rectangle = new Rectangle();\r\n        \r\n        constructor() {\r\n            super();\r\n        }\r\n        \r\n        get globalX(): number {\r\n            return this._viewport.x;\r\n        }\r\n        \r\n        get globalY(): number {\r\n            return this._viewport.y;\r\n        }\r\n        \r\n        get x(): number {\r\n            return this._x;\r\n        }\r\n        \r\n        set x(value: number) {\r\n            if (this._x === value) {\r\n                return;\r\n            }\r\n            this._x = value;\r\n            this.posChange = true;\r\n        }\r\n        \r\n        get y(): number {\r\n            return this._y;\r\n        }\r\n        \r\n        set y(value: number) {\r\n            if (this._y === value) {\r\n                return;\r\n            }\r\n            this._y = value;\r\n            this.posChange = true;\r\n        }\r\n        \r\n        public pos(x: number, y: number): void {\r\n            if (this._x === x && this._y === y) {\r\n                return;\r\n            }\r\n            this._x = x;\r\n            this._y = y;\r\n            this.posChange = true;\r\n        }\r\n        \r\n        get scaleY(): number {\r\n            return this._scaleY;\r\n        }\r\n        \r\n        set scaleY(value: number) {\r\n            if (this._scaleY === value) {\r\n                return;\r\n            }\r\n            this._scaleY = value;\r\n            this.scaleChange = true;\r\n        }\r\n        \r\n        get scaleX(): number {\r\n            return this._scaleX;\r\n        }\r\n        \r\n        set scaleX(value: number) {\r\n            if (this._scaleX === value) {\r\n                return;\r\n            }\r\n            this._scaleX = value;\r\n            this.scaleChange = true;\r\n        }\r\n        \r\n        public scale(scaleX: number, scaleY: number): void {\r\n            if (this._scaleX === scaleX && this._scaleY === scaleY) {\r\n                return;\r\n            }\r\n            this._scaleX = scaleX;\r\n            this._scaleY = scaleY;\r\n            this.scaleChange = true;\r\n        }\r\n        \r\n        \r\n        public render(parentX, parentY) {\r\n            var sWidth = this.width * Math.abs(this.scaleX);\r\n            var sHeight = this.height * Math.abs(this.scaleY);\r\n            var sX = parentX + this.x - this.pivotX * sWidth;\r\n            var sY = parentY + this.y - this.pivotY * sHeight;\r\n            \r\n            if (this.scaleX < 0) {\r\n                sX += sWidth;\r\n            }\r\n            if (this.scaleY < 0) {\r\n                sY += sHeight;\r\n            }\r\n            this._viewport.setTo(sX, sY, sWidth, sHeight);\r\n            \r\n            if (!Stage.viewport.containsRect(this._viewport)) {\r\n                return;\r\n            }\r\n            // 渲染自身\r\n            this.renderSelf();\r\n            // 渲染子对象\r\n            let len = this.children.length;\r\n            for (let index = 0; index < len; index++) {\r\n                var element: DisplayObject = this.children[index] as DisplayObject;\r\n                element.render(this.x + parentX, this.y + parentY);\r\n            }\r\n        }\r\n        \r\n        protected renderSelf(): void {\r\n        }\r\n        \r\n        \r\n    }\r\n}\r\n","module display {\r\n    import Rectangle = math.Rectangle;\r\n    import GlobalData = common.GlobalData;\r\n    \r\n    export class Stage extends DisplayObject {\r\n        private static _instance: Stage;\r\n        public static viewport: Rectangle;\r\n        \r\n        constructor() {\r\n            super();\r\n            \r\n            this.x = (GlobalData.ScreenWidth - GlobalData.StageWidth) * 0.5;\r\n            this.y = (GlobalData.ScreenHeight - GlobalData.StageHeight) * 0.5;\r\n            this.width = GlobalData.StageWidth;\r\n            this.height = GlobalData.StageHeight;\r\n            Stage.viewport = new Rectangle(this.x, this.y, this.width, this.height);\r\n        }\r\n        \r\n        public static instance(): Stage {\r\n            if (!Stage._instance) {\r\n                this._instance = new Stage()\r\n            }\r\n            return this._instance;\r\n        }\r\n        \r\n    }\r\n}\r\n","/**\r\n * Created by cjb on 2018-04-30\r\n */\r\nmodule core.base {\r\n    export class Vo {\r\n        \r\n        public static copy(from: Vo, to: Vo): Vo {\r\n            for (var propName in from) {\r\n                to[propName] = from[propName];\r\n            }\r\n            return to;\r\n        }\r\n        \r\n        public clone(): Vo {\r\n            return Vo.copy(this, new Vo());\r\n        }\r\n        \r\n    }\r\n}\r\n","/**\r\n * Created by cjb on 2018-05-01\r\n */\r\nmodule display {\r\n    export class RenderContext {\r\n        private ctx0: WebGLRenderingContext;\r\n        private ctx1: CanvasRenderingContext2D;\r\n        public static _instance: RenderContext;\r\n        \r\n        constructor() {\r\n            if (RenderContext._instance) {\r\n                console.error(\"get instance instead of new\");\r\n                return;\r\n            }\r\n            this.ctx0 = GlobalData.Ctx0;\r\n            this.ctx1 = GlobalData.Ctx1;\r\n        }\r\n        \r\n        public static get instance(): RenderContext {\r\n            if (!this._instance) {\r\n                this._instance = new RenderContext();\r\n            }\r\n            return this._instance;\r\n        }\r\n        \r\n        public scale(x: number, y: number): void {\r\n\r\n        }\r\n    }\r\n}\r\n","/**\r\n * Created by cjb on 2018-04-30\r\n */\r\nimport GlobalData = common.GlobalData;\r\nimport Font = core.base.Font;\r\n\r\nfunction init(stageW: number, stageH: number, ScreenW?: number, ScreenH?: number): void {\r\n    GlobalData.StageWidth = stageW;\r\n    GlobalData.ScreenHeight = stageH;\r\n    GlobalData.ScreenWidth = ScreenW ? ScreenW : stageW;\r\n    GlobalData.ScreenHeight = ScreenH ? ScreenH : stageH;\r\n    \r\n    new core.base.Init();\r\n}\r\n\r\nfunction setFont(font: string) {\r\n    Font.instance.setFont(font);\r\n}","module manager {\n    /**\n     * 帧运算管理器\n     * 负责管理所有注册对象的enterFrame函数，对每帧一定要计算的和卡的时候可以跳帧的进行区分处理\n     * 使用方法FrameManager.add(process);\n     *\n     * @author caijingxiao\n     *\n     */\n    export class FrameManager {\n        public static readonly REAL_TIME = 2;\n        public static readonly NORMAL = 1;\n        public static readonly IDLE = 0;\n\n        public static frameRate = 1;    // 帧速度\n        private static _deltaTime = 0; // 表示从上一帧到当前帧时间，以毫秒为单位。\n        private static _isInterpolation: Boolean = false;  // 帧补偿中\n\n        private static _fps; // 帧/秒 Frames Per Second\n        private static _spf: number;// 秒/帧 Second Per Frames\n        private static _processList = [];  // 处理函数列表\n        private static _priorityTime = []; // 优先级时间，用于跳帧处理\n\n        private static _lastFrameTimestamp = 0; // 上一帧启动 Flash 运行时虚拟计算机以来经过的毫秒数\n        private static _time: number = 0.0;  // 启动FrameManager以来经过的毫秒数\n        private static _currentFrameTime;    // 当前帧所用的总时间，从退出上一帧开始计算，直到当前帧所有计算完\n        private static _serverTime = 0;\t// 服务器时间\n\n        // 计算分数\n        private static readonly SAMPLE_COUNT = 10; // 间隔几帧计算帧分数\n        private static _frameCount;    // 计算总帧数\n        private static _frameScore;    // 帧分数\n        private static _frameAvgScoreIndex = 0;\n        private static _frameAvgScore = []; // 平均帧分数\n        private static _lastScoreTime;\n\n        public static start() {\n            if (FrameManager._fps !== undefined)\n                return;\n            FrameManager._fps = 60;\n            FrameManager._spf = 1000 / FrameManager._fps;\n\n            const LOWEST = 24;  // 至少保证不低于多少帧数\n            for (var i = 0; i < 3; i++) {\n                FrameManager._processList[i] = {};\n                FrameManager._priorityTime[i] = 1000 / (LOWEST - i * LOWEST / 3);\n            }\n\n            FrameManager._frameCount = 0;\n            FrameManager._lastFrameTimestamp = Date.now();\n            window.requestAnimationFrame(FrameManager.onEnterFrame.bind(this));\n        }\n\n        /**\n         * 注册每帧运行函数\n         * 由于使用Dictionary，所以先加入的函数并不一定会先运行\n         * @param process 处理函数，函数格式Function(passedTime:int)，passedTime表示上一帧到当前帧所经过的毫秒数\n         * @param priority 优先级，默认为FrameManager.NORMAL\n         *\n         */\n        public static add(key: string, process: Function, thisObject: any, priority = FrameManager.NORMAL): void {\n            if (FrameManager._processList[priority][key] !== undefined)\n                throw new Error(\"已经注册过process\");\n            FrameManager._processList[priority][key] = process.bind(thisObject);\n        }\n\n        /**\n         * 移除每帧运行函数\n         * @param process 处理函数\n         */\n        public static remove(key: string): void {\n            for (var i = 0; i < FrameManager._processList.length; i++) {\n                if (FrameManager._processList[i][key] !== undefined) {\n                    delete FrameManager._processList[i][key];\n                    break;\n                }\n            }\n        }\n\n        // 进入帧时候触发事件        \n        private static onEnterFrame(): void {\n            var now = Date.now();\n            var passedTime = now - FrameManager._lastFrameTimestamp;    // 上一帧到当前帧所经过的时间\n\n            FrameManager._time += passedTime * FrameManager.frameRate;\n\n            FrameManager._serverTime += passedTime;\n            FrameManager._frameCount++;\n\n            FrameManager.process(passedTime, passedTime, 1);\n\n            // 经过process后的时间\n            FrameManager._currentFrameTime = Date.now() - FrameManager._lastFrameTimestamp;\n\n            FrameManager._lastFrameTimestamp = now;\n\n            window.requestAnimationFrame(FrameManager.onEnterFrame.bind(this));\n        }\n\n        private static process(passedTime:number, processTime:number, funRepeatTime:number):void\n        {\n            FrameManager._deltaTime = processTime;\n            // 实时每帧都运行\n            for (let key in FrameManager._processList[FrameManager.REAL_TIME])\n            {\n                FrameManager.callbackHandler(FrameManager._processList[FrameManager.REAL_TIME][key], processTime);\n            }\n\n            for (var i = FrameManager.NORMAL; i >= FrameManager.IDLE; --i)\n            {\n                if (passedTime > FrameManager._priorityTime[i]) // 跳帧处理\n                {\n                    if (funRepeatTime <= 1) // funRepeatTime>1 表示帧补偿，帧补偿时不跳帧\n                        continue;\n                }\n                for (let key in FrameManager._processList[i])\n                {\n                    FrameManager.callbackHandler(FrameManager._processList[i][key], processTime);\n                }\n            }\n        }\n\n        private static callbackHandler(callback: Function, passedTime: number): void {\n            if (callback.length == 0)\n                callback();\n            else if (callback.length == 1)\n                callback(passedTime);\n            else if (callback.length == 2)\n                callback(FrameManager._time, passedTime);\n            else\n                throw new Error();\n        }\n\n        /**\n         * 启动FrameManager以来经过的毫秒数\n         */\n        public static get time(): number {\n            return FrameManager._time;\n        }\n    }\n}\n","\r\nmodule math {\r\n\r\n    let PI = Math.PI;\r\n    let TwoPI = PI * 2;\r\n    let DEG_TO_RAD:number = PI / 180;\r\n\r\n    let matrixPool:Matrix[] = [];\r\n    /**\r\n     * The Matrix class represents a transformation matrix that determines how to map points from one coordinate space to\r\n     * another. You can perform various graphical transformations on a display object by setting the properties of a Matrix\r\n     * object, applying that Matrix object to the matrix property of a display object, These transformation functions include\r\n     * translation (x and y repositioning), rotation, scaling, and skewing.\r\n     * @version Egret 2.4\r\n     * @platform Web,Native\r\n     * @includeExample egret/geom/Matrix.ts\r\n     * @language en_US\r\n     */\r\n    /**\r\n     * Matrix 类表示一个转换矩阵，它确定如何将点从一个坐标空间映射到另一个坐标空间。\r\n     * 您可以对一个显示对象执行不同的图形转换，方法是设置 Matrix 对象的属性，将该 Matrix\r\n     * 对象应用于显示对象的 matrix 属性。这些转换函数包括平移（x 和 y 重新定位）、旋转、缩放和倾斜。\r\n     * @version Egret 2.4\r\n     * @platform Web,Native\r\n     * @includeExample egret/geom/Matrix.ts\r\n     * @language zh_CN\r\n     */\r\n    export class Matrix {\r\n\r\n        /**\r\n         * Releases a matrix instance to the object pool\r\n         * @param matrix matrix that Needs to be recycled\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n        /**\r\n         * 释放一个Matrix实例到对象池\r\n         * @param matrix 需要回收的 matrix\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public static release(matrix:Matrix):void {\r\n            if(!matrix){\r\n                return;\r\n            }\r\n            matrixPool.push(matrix);\r\n        }\r\n\r\n        /**\r\n         * get a matrix instance from the object pool or create a new one.\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n        /**\r\n         * 从对象池中取出或创建一个新的Matrix对象。\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public static create():Matrix {\r\n            let matrix = matrixPool.pop();\r\n            if (!matrix) {\r\n                matrix = new Matrix();\r\n            }\r\n            return matrix;\r\n        }\r\n\r\n        /**\r\n         * Creates a new Matrix object with the specified parameters.\r\n         * @param a The value that affects the positioning of pixels along the x axis when scaling or rotating an image.\r\n         * @param b The value that affects the positioning of pixels along the y axis when rotating or skewing an image.\r\n         * @param c The value that affects the positioning of pixels along the x axis when rotating or skewing an image.\r\n         * @param d The value that affects the positioning of pixels along the y axis when scaling or rotating an image..\r\n         * @param tx The distance by which to translate each point along the x axis.\r\n         * @param ty The distance by which to translate each point along the y axis.\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n        /**\r\n         * 使用指定参数创建一个 Matrix 对象\r\n         * @param a 缩放或旋转图像时影响像素沿 x 轴定位的值。\r\n         * @param b 旋转或倾斜图像时影响像素沿 y 轴定位的值。\r\n         * @param c 旋转或倾斜图像时影响像素沿 x 轴定位的值。\r\n         * @param d 缩放或旋转图像时影响像素沿 y 轴定位的值。\r\n         * @param tx 沿 x 轴平移每个点的距离。\r\n         * @param ty 沿 y 轴平移每个点的距离。\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        constructor(a:number = 1, b:number = 0, c:number = 0, d:number = 1, tx:number = 0, ty:number = 0) {\r\n            this.a = a;\r\n            this.b = b;\r\n            this.c = c;\r\n            this.d = d;\r\n            this.tx = tx;\r\n            this.ty = ty;\r\n        }\r\n\r\n        /**\r\n         * The value that affects the positioning of pixels along the x axis when scaling or rotating an image.\r\n         * @default 1\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n        /**\r\n         * 缩放或旋转图像时影响像素沿 x 轴定位的值\r\n         * @default 1\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public a:number;\r\n        /**\r\n         * The value that affects the positioning of pixels along the y axis when rotating or skewing an image.\r\n         * @default 0\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n        /**\r\n         * 旋转或倾斜图像时影响像素沿 y 轴定位的值\r\n         * @default 0\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public b:number;\r\n        /**\r\n         * The value that affects the positioning of pixels along the x axis when rotating or skewing an image.\r\n         * @default 0\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n        /**\r\n         * 旋转或倾斜图像时影响像素沿 x 轴定位的值\r\n         * @default 0\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public c:number;\r\n        /**\r\n         * The value that affects the positioning of pixels along the y axis when scaling or rotating an image.\r\n         * @default 1\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n        /**\r\n         * 缩放或旋转图像时影响像素沿 y 轴定位的值\r\n         * @default 1\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public d:number;\r\n        /**\r\n         * The distance by which to translate each point along the x axis.\r\n         * @default 0\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n        /**\r\n         * 沿 x 轴平移每个点的距离\r\n         * @default 0\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public tx:number;\r\n\r\n        /**\r\n         * The distance by which to translate each point along the y axis.\r\n         * @default 0\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n        /**\r\n         * 沿 y 轴平移每个点的距离\r\n         * @default 0\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public ty:number;\r\n\r\n        /**\r\n         * Returns a new Matrix object that is a clone of this matrix, with an exact copy of the contained object.\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n        /**\r\n         * 返回一个新的 Matrix 对象，它是此矩阵的克隆，带有与所含对象完全相同的副本。\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public clone():Matrix {\r\n            return new Matrix(this.a, this.b, this.c, this.d, this.tx, this.ty);\r\n        }\r\n\r\n        /**\r\n         * Concatenates a matrix with the current matrix, effectively combining the geometric effects of the two. In mathematical\r\n         * terms, concatenating two matrixes is the same as combining them using matrix multiplication.\r\n         * @param other The matrix to be concatenated to the source matrix.\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n        /**\r\n         * 将某个矩阵与当前矩阵连接，从而将这两个矩阵的几何效果有效地结合在一起。在数学术语中，将两个矩阵连接起来与使用矩阵乘法将它们结合起来是相同的。\r\n         * @param other 要连接到源矩阵的矩阵。\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public concat(other:Matrix):void {\r\n            let a =  this.a * other.a;\r\n            let b =  0.0;\r\n            let c =  0.0;\r\n            let d =  this.d * other.d;\r\n            let tx = this.tx * other.a + other.tx;\r\n            let ty = this.ty * other.d + other.ty;\r\n\r\n            if (this.b !== 0.0 || this.c !== 0.0 || other.b !== 0.0 || other.c !== 0.0) {\r\n                a  += this.b * other.c;\r\n                d  += this.c * other.b;\r\n                b  += this.a * other.b + this.b * other.d;\r\n                c  += this.c * other.a + this.d * other.c;\r\n                tx += this.ty * other.c;\r\n                ty += this.tx * other.b;\r\n            }\r\n\r\n            this.a = a;\r\n            this.b = b;\r\n            this.c = c;\r\n            this.d = d;\r\n            this.tx = tx;\r\n            this.ty = ty;\r\n        }\r\n\r\n        /**\r\n         * Copies all of the matrix data from the source Point object into the calling Matrix object.\r\n         * @param other  The Matrix object from which to copy the data.\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n        /**\r\n         * 将源 Matrix 对象中的所有矩阵数据复制到调用方 Matrix 对象中。\r\n         * @param other 要拷贝的目标矩阵\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public copyFrom(other:Matrix):Matrix {\r\n            this.a = other.a;\r\n            this.b = other.b;\r\n            this.c = other.c;\r\n            this.d = other.d;\r\n            this.tx = other.tx;\r\n            this.ty = other.ty;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets each matrix property to a value that causes a null transformation. An object transformed by applying an\r\n         * identity matrix will be identical to the original. After calling the identity() method, the resulting matrix\r\n         * has the following properties: a=1, b=0, c=0, d=1, tx=0, ty=0.\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n        /**\r\n         * 为每个矩阵属性设置一个值，该值将导致矩阵无转换。通过应用恒等矩阵转换的对象将与原始对象完全相同。\r\n         * 调用 identity() 方法后，生成的矩阵具有以下属性：a=1、b=0、c=0、d=1、tx=0 和 ty=0。\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public identity():void {\r\n            this.a = this.d = 1;\r\n            this.b = this.c = this.tx = this.ty = 0;\r\n        }\r\n\r\n        /**\r\n         * Performs the opposite transformation of the original matrix. You can apply an inverted matrix to an object to\r\n         * undo the transformation performed when applying the original matrix.\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n        /**\r\n         * 执行原始矩阵的逆转换。\r\n         * 您可以将一个逆矩阵应用于对象来撤消在应用原始矩阵时执行的转换。\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public invert():void {\r\n            this.$invertInto(this);\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        $invertInto(target:Matrix):void {\r\n            let a = this.a;\r\n            let b  = this.b;\r\n            let c  = this.c;\r\n            let d = this.d;\r\n            let tx = this.tx;\r\n            let ty = this.ty;\r\n            if (b == 0 && c == 0) {\r\n                target.b = target.c = 0;\r\n                if(a==0||d==0){\r\n                    target.a = target.d = target.tx = target.ty = 0;\r\n                }\r\n                else{\r\n                    a = target.a = 1 / a;\r\n                    d = target.d = 1 / d;\r\n                    target.tx = -a * tx;\r\n                    target.ty = -d * ty;\r\n                }\r\n\r\n                return;\r\n            }\r\n            let determinant = a * d - b * c;\r\n            if (determinant == 0) {\r\n                target.identity();\r\n                return;\r\n            }\r\n            determinant = 1 / determinant;\r\n            let k = target.a =  d * determinant;\r\n            b = target.b = -b * determinant;\r\n            c = target.c = -c * determinant;\r\n            d = target.d =  a * determinant;\r\n            target.tx = -(k * tx + c * ty);\r\n            target.ty = -(b * tx + d * ty);\r\n        }\r\n\r\n        /**\r\n         * Applies a rotation transformation to the Matrix object.\r\n         * The rotate() method alters the a, b, c, and d properties of the Matrix object.\r\n         * @param angle The rotation angle in radians.\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n        /**\r\n         * 对 Matrix 对象应用旋转转换。\r\n         * rotate() 方法将更改 Matrix 对象的 a、b、c 和 d 属性。\r\n         * @param angle 以弧度为单位的旋转角度。\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public rotate(angle:number):void {\r\n            angle = +angle;\r\n            if (angle !== 0) {\r\n                angle = angle / DEG_TO_RAD;\r\n                let u = Math.cos(angle);\r\n                let v = Math.sin(angle);\r\n                let ta = this.a;\r\n                let tb = this.b;\r\n                let tc = this.c;\r\n                let td = this.d;\r\n                let ttx = this.tx;\r\n                let tty = this.ty;\r\n                this.a = ta  * u - tb  * v;\r\n                this.b = ta  * v + tb  * u;\r\n                this.c = tc  * u - td  * v;\r\n                this.d = tc  * v + td  * u;\r\n                this.tx = ttx * u - tty * v;\r\n                this.ty = ttx * v + tty * u;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Applies a scaling transformation to the matrix. The x axis is multiplied by sx, and the y axis it is multiplied by sy.\r\n         * The scale() method alters the a and d properties of the Matrix object.\r\n         * @param sx A multiplier used to scale the object along the x axis.\r\n         * @param sy A multiplier used to scale the object along the y axis.\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n        /**\r\n         * 对矩阵应用缩放转换。x 轴乘以 sx，y 轴乘以 sy。\r\n         * scale() 方法将更改 Matrix 对象的 a 和 d 属性。\r\n         * @param sx 用于沿 x 轴缩放对象的乘数。\r\n         * @param sy 用于沿 y 轴缩放对象的乘数。\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public scale(sx:number, sy:number):void {\r\n            if (sx !== 1) {\r\n                this.a *= sx;\r\n                this.c *= sx;\r\n                this.tx *= sx;\r\n            }\r\n            if (sy !== 1) {\r\n                this.b *= sy;\r\n                this.d *= sy;\r\n                this.ty *= sy;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Sets the members of Matrix to the specified values\r\n         * @param a The value that affects the positioning of pixels along the x axis when scaling or rotating an image.\r\n         * @param b The value that affects the positioning of pixels along the y axis when rotating or skewing an image.\r\n         * @param c The value that affects the positioning of pixels along the x axis when rotating or skewing an image.\r\n         * @param d The value that affects the positioning of pixels along the y axis when scaling or rotating an image..\r\n         * @param tx The distance by which to translate each point along the x axis.\r\n         * @param ty The distance by which to translate each point along the y axis.\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n        /**\r\n         * 将 Matrix 的成员设置为指定值\r\n         * @param a 缩放或旋转图像时影响像素沿 x 轴定位的值。\r\n         * @param b 旋转或倾斜图像时影响像素沿 y 轴定位的值。\r\n         * @param c 旋转或倾斜图像时影响像素沿 x 轴定位的值。\r\n         * @param d 缩放或旋转图像时影响像素沿 y 轴定位的值。\r\n         * @param tx 沿 x 轴平移每个点的距离。\r\n         * @param ty 沿 y 轴平移每个点的距离。\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public setTo(a:number, b:number, c:number, d:number, tx:number, ty:number):Matrix {\r\n            this.a = a;\r\n            this.b = b;\r\n            this.c = c;\r\n            this.d = d;\r\n            this.tx = tx;\r\n            this.ty = ty;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Returns the result of applying the geometric transformation represented by the Matrix object to the specified point.\r\n         * @param pointX The x coordinate for which you want to get the result of the Matrix transformation.\r\n         * @param pointY The y coordinate for which you want to get the result of the Matrix transformation.\r\n         * @param resultPoint A reusable instance of Point for saving the results. Passing this parameter can reduce the\r\n         * number of reallocate objects, which allows you to get better code execution performance.\r\n         * @returns The point resulting from applying the Matrix transformation.\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n\r\n        /**\r\n         * Translates the matrix along the x and y axes, as specified by the dx and dy parameters.\r\n         * @param dx The amount of movement along the x axis to the right, in pixels.\r\n         * @param dy The amount of movement down along the y axis, in pixels.\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n        /**\r\n         * 沿 x 和 y 轴平移矩阵，由 dx 和 dy 参数指定。\r\n         * @param dx 沿 x 轴向右移动的量（以像素为单位）。\r\n         * @param dy 沿 y 轴向下移动的量（以像素为单位）。\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public translate(dx:number, dy:number):void {\r\n            this.tx += dx;\r\n            this.ty += dy;\r\n        }\r\n\r\n        /**\r\n         * Determines whether two matrixes are equal.\r\n         * @param other The matrix to be compared.\r\n         * @returns A value of true if the object is equal to this Matrix object; false if it is not equal.\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n        /**\r\n         * 是否与另一个矩阵数据相等\r\n         * @param other 要比较的另一个矩阵对象。\r\n         * @returns 是否相等，ture表示相等。\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public equals(other:Matrix):boolean {\r\n            return this.a == other.a && this.b == other.b &&\r\n                this.c == other.c && this.d == other.d &&\r\n                this.tx == other.tx && this.ty == other.ty;\r\n        }\r\n\r\n        /**\r\n         * prepend matrix\r\n         * @param a The value that affects the positioning of pixels along the x axis when scaling or rotating an image.\r\n         * @param b The value that affects the positioning of pixels along the y axis when rotating or skewing an image.\r\n         * @param c The value that affects the positioning of pixels along the x axis when rotating or skewing an image.\r\n         * @param d The value that affects the positioning of pixels along the y axis when scaling or rotating an image..\r\n         * @param tx The distance by which to translate each point along the x axis.\r\n         * @param ty The distance by which to translate each point along the y axis.\r\n         * @returns matrix\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n        /**\r\n         * 前置矩阵\r\n         * @param a 缩放或旋转图像时影响像素沿 x 轴定位的值\r\n         * @param b 缩放或旋转图像时影响像素沿 y 轴定位的值\r\n         * @param c 缩放或旋转图像时影响像素沿 x 轴定位的值\r\n         * @param d 缩放或旋转图像时影响像素沿 y 轴定位的值\r\n         * @param tx 沿 x 轴平移每个点的距离\r\n         * @param ty 沿 y 轴平移每个点的距离\r\n         * @returns 矩阵自身\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public prepend(a:number, b:number, c:number, d:number, tx:number, ty:number):Matrix {\r\n            let tx1 = this.tx;\r\n            if (a != 1 || b != 0 || c != 0 || d != 1) {\r\n                let a1 = this.a;\r\n                let c1 = this.c;\r\n                this.a = a1 * a + this.b * c;\r\n                this.b = a1 * b + this.b * d;\r\n                this.c = c1 * a + this.d * c;\r\n                this.d = c1 * b + this.d * d;\r\n            }\r\n            this.tx = tx1 * a + this.ty * c + tx;\r\n            this.ty = tx1 * b + this.ty * d + ty;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * append matrix\r\n         * @param a The value that affects the positioning of pixels along the x axis when scaling or rotating an image.\r\n         * @param b The value that affects the positioning of pixels along the y axis when rotating or skewing an image.\r\n         * @param c The value that affects the positioning of pixels along the x axis when rotating or skewing an image.\r\n         * @param d The value that affects the positioning of pixels along the y axis when scaling or rotating an image..\r\n         * @param tx The distance by which to translate each point along the x axis.\r\n         * @param ty The distance by which to translate each point along the y axis.\r\n         * @returns matrix\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n        /**\r\n         * 后置矩阵\r\n         * @param a 缩放或旋转图像时影响像素沿 x 轴定位的值\r\n         * @param b 缩放或旋转图像时影响像素沿 y 轴定位的值\r\n         * @param c 缩放或旋转图像时影响像素沿 x 轴定位的值\r\n         * @param d 缩放或旋转图像时影响像素沿 y 轴定位的值\r\n         * @param tx 沿 x 轴平移每个点的距离\r\n         * @param ty 沿 y 轴平移每个点的距离\r\n         * @returns 矩阵自身\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public append(a:number, b:number, c:number, d:number, tx:number, ty:number):Matrix {\r\n            let a1 = this.a;\r\n            let b1 = this.b;\r\n            let c1 = this.c;\r\n            let d1 = this.d;\r\n            if (a != 1 || b != 0 || c != 0 || d != 1) {\r\n                this.a = a * a1 + b * c1;\r\n                this.b = a * b1 + b * d1;\r\n                this.c = c * a1 + d * c1;\r\n                this.d = c * b1 + d * d1;\r\n            }\r\n            this.tx = tx * a1 + ty * c1 + this.tx;\r\n            this.ty = tx * b1 + ty * d1 + this.ty;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Given a point in the pretransform coordinate space, returns the coordinates of that point after the transformation occurs.\r\n         * Unlike the standard transformation applied using the transformPoint() method, the deltaTransformPoint() method's transformation does not consider the translation parameters tx and ty.\r\n         * @param point The point for which you want to get the result of the matrix transformation.\r\n         * @returns The point resulting from applying the matrix transformation.\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n\r\n        /**\r\n         * Returns a text value listing the properties of the Matrix object.\r\n         * @returns A string containing the values of the properties of the Matrix object: a, b, c, d, tx, and ty.\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n        /**\r\n         * 返回将 Matrix 对象表示的几何转换应用于指定点所产生的结果。\r\n         * @returns 一个字符串，它包含 Matrix 对象的属性值：a、b、c、d、tx 和 ty。\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public toString():string {\r\n            return \"(a=\" + this.a + \", b=\" + this.b + \", c=\" + this.c + \", d=\" + this.d + \", tx=\" + this.tx + \", ty=\" + this.ty + \")\";\r\n        }\r\n\r\n        /**\r\n         * Includes parameters for scaling, rotation, and translation. When applied to a matrix it sets the matrix's values based on those parameters.\r\n         * @param scaleX The factor by which to scale horizontally.\r\n         * @param scaleY The factor by which scale vertically.\r\n         * @param rotation The amount to rotate, in radians.\r\n         * @param tx The number of pixels to translate (move) to the right along the x axis.\r\n         * @param ty The number of pixels to translate (move) down along the y axis.\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n\r\n        /**\r\n         * Creates the specific style of matrix expected by the beginGradientFill() and lineGradientStyle() methods of the Graphics class.\r\n         * Width and height are scaled to a scaleX/scaleY pair and the tx/ty values are offset by half the width and height.\r\n         * @param width The width of the gradient box.\r\n         * @param height The height of the gradient box.\r\n         * @param rotation The amount to rotate, in radians.\r\n         * @param tx The distance, in pixels, to translate to the right along the x axis. This value is offset by half of the width parameter.\r\n         * @param ty The distance, in pixels, to translate down along the y axis. This value is offset by half of the height parameter.\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language en_US\r\n         */\r\n\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        private getDeterminant() {\r\n            return this.a * this.d - this.b * this.c;\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        $getScaleX():number {\r\n            let m = this;\r\n            if (m.a == 1 && m.b == 0) {\r\n                return 1;\r\n            }\r\n            let result = Math.sqrt(m.a * m.a + m.b * m.b);\r\n            return this.getDeterminant() < 0 ? -result : result;\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        $getScaleY():number {\r\n            let m = this;\r\n            if (m.c == 0 && m.d == 1) {\r\n                return 1;\r\n            }\r\n            let result = Math.sqrt(m.c * m.c + m.d * m.d);\r\n            return this.getDeterminant() < 0 ? -result : result;\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        $getSkewX():number {\r\n            return Math.atan2(this.d, this.c) - (PI / 2);\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        $getSkewY():number {\r\n            return Math.atan2(this.b, this.a);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * 仅供框架内复用，要防止暴露引用到外部。\r\n     */\r\n    export let $TempMatrix = new Matrix();\r\n}","module math {\r\n    let pointPool: Point[] = [];\r\n    let DEG_TO_RAD: number = Math.PI / 180;\r\n\r\n    /**\r\n     * Point 对象表示二维坐标系统中的某个位置，其中 x 表示水平轴，y 表示垂直轴。\r\n     */\r\n    export class Point {\r\n        public static release(point: Point): void {\r\n            if (!point) {\r\n                return;\r\n            }\r\n            pointPool.push(point);\r\n        }\r\n\r\n        /**\r\n         * 从对象池中取出或创建一个新的Point对象。\r\n         * @param x 该对象的x属性值，默认为0\r\n         * @param y 该对象的y属性值，默认为0\r\n         */\r\n        public static create(x: number, y: number): Point {\r\n            let point = pointPool.pop();\r\n            if (!point) {\r\n                point = new Point();\r\n            }\r\n            return point.setTo(x, y);\r\n        }\r\n\r\n        /**\r\n         * 创建一个 egret.Point 对象.若不传入任何参数，将会创建一个位于（0，0）位置的点。\r\n         * @param x 该对象的x属性值，默认为0\r\n         * @param y 该对象的y属性值，默认为0\r\n         */\r\n        public constructor(x: number = 0, y: number = 0) {\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n\r\n        /**\r\n         * 该点的水平坐标。\r\n         * @default 0\r\n         */\r\n        public x: number;\r\n\r\n        /**\r\n         * 该点的垂直坐标。\r\n         * @default 0\r\n         */\r\n        public y: number;\r\n\r\n        /**\r\n         * 从 (0,0) 到此点的线段长度。\r\n         */\r\n        public get length(): number {\r\n            return Math.sqrt(this.x * this.x + this.y * this.y);\r\n        }\r\n\r\n        /**\r\n         * 将 Point 的成员设置为指定值\r\n         * @param x 该对象的x属性值\r\n         * @param y 该对象的y属性值\r\n         */\r\n        public setTo(x: number, y: number): Point {\r\n            this.x = x;\r\n            this.y = y;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * 克隆点对象\r\n         */\r\n        public clone(): Point {\r\n            return new Point(this.x, this.y);\r\n        }\r\n\r\n        /**\r\n         * 确定两个点是否相同。如果两个点具有相同的 x 和 y 值，则它们是相同的点。\r\n         * @param toCompare 要比较的点。\r\n         * @returns 如果该对象与此 Point 对象相同，则为 true 值，如果不相同，则为 false。\r\n         */\r\n        public equals(toCompare: Point): boolean {\r\n            return this.x == toCompare.x && this.y == toCompare.y;\r\n        }\r\n\r\n        /**\r\n         * 返回 pt1 和 pt2 之间的距离。\r\n         * @param p1 第一个点\r\n         * @param p2 第二个点\r\n         * @returns 第一个点和第二个点之间的距离。\r\n         */\r\n        public static distance(p1: Point, p2: Point): number {\r\n            return Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));\r\n        }\r\n\r\n        /**\r\n         * 将源 Point 对象中的所有点数据复制到调用方 Point 对象中。\r\n         * @param sourcePoint 要从中复制数据的 Point 对象。\r\n         */\r\n        public copyFrom(sourcePoint: Point): void {\r\n            this.x = sourcePoint.x;\r\n            this.y = sourcePoint.y;\r\n        }\r\n\r\n        /**\r\n         * 将另一个点的坐标添加到此点的坐标以创建一个新点。\r\n         * @param v 要添加的点。\r\n         * @returns 新点。\r\n         */\r\n        public add(v: Point): Point {\r\n            return new Point(this.x + v.x, this.y + v.y);\r\n        }\r\n\r\n        /**\r\n         * 确定两个指定点之间的点。\r\n         * 参数 f 确定新的内插点相对于参数 pt1 和 pt2 指定的两个端点所处的位置。参数 f 的值越接近 1.0，则内插点就越接近第一个点（参数 pt1）。参数 f 的值越接近 0，则内插点就越接近第二个点（参数 pt2）。\r\n         * @param pt1 第一个点。\r\n         * @param pt2 第二个点。\r\n         * @param f 两个点之间的内插级别。表示新点将位于 pt1 和 pt2 连成的直线上的什么位置。如果 f=1，则返回 pt1；如果 f=0，则返回 pt2。\r\n         */\r\n        public static interpolate(pt1: Point, pt2: Point, f: number): Point {\r\n            let f1: number = 1 - f;\r\n            return new Point(pt1.x * f + pt2.x * f1, pt1.y * f + pt2.y * f1);\r\n        }\r\n\r\n        /**\r\n         * 将 (0,0) 和当前点之间的线段缩放为设定的长度。\r\n         * @param thickness 缩放值。例如，如果当前点为 (0,5) 并且您将它规范化为 1，则返回的点位于 (0,1) 处。\r\n         */\r\n        public normalize(thickness: number): void {\r\n            if (this.x != 0 || this.y != 0) {\r\n                let relativeThickness: number = thickness / this.length;\r\n                this.x *= relativeThickness;\r\n                this.y *= relativeThickness;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * 按指定量偏移 Point 对象。dx 的值将添加到 x 的原始值中以创建新的 x 值。dy 的值将添加到 y 的原始值中以创建新的 y 值。\r\n         * @param dx 水平坐标 x 的偏移量。\r\n         * @param dy 水平坐标 y 的偏移量。\r\n         */\r\n        public offset(dx: number, dy: number): void {\r\n            this.x += dx;\r\n            this.y += dy;\r\n        }\r\n\r\n        /**\r\n         * 将一对极坐标转换为笛卡尔点坐标。\r\n         * @param len 极坐标对的长度。\r\n         * @param angle 极坐标对的角度（以弧度表示）。\r\n         */\r\n        public static polar(len: number, angle: number): Point {\r\n            return new Point(len * NumberUtils.cos(angle / DEG_TO_RAD), len * NumberUtils.sin(angle / DEG_TO_RAD));\r\n        }\r\n\r\n        /**\r\n         * 从此点的坐标中减去另一个点的坐标以创建一个新点。\r\n         * @param v 要减去的点。\r\n         * @returns 新点。\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public subtract(v: Point): Point {\r\n            return new Point(this.x - v.x, this.y - v.y);\r\n        }\r\n\r\n        /**\r\n         * 返回包含 x 和 y 坐标的值的字符串。该字符串的格式为 \"(x=x, y=y)\"，因此为点 23,17 调用 toString() 方法将返回 \"(x=23, y=17)\"。\r\n         * @returns 坐标的字符串表示形式。\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public toString(): string {\r\n            return \"(x=\" + this.x + \", y=\" + this.y + \")\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * 仅供框架内复用，要防止暴露引用到外部。\r\n     */\r\n    export let $TempPoint = new Point();\r\n}","module math {\r\n    export class NumberUtils {\r\n        /**\r\n         * 判断是否是数值\r\n         * @param value 需要判断的参数\r\n         * @returns\r\n         */\r\n        public static isNumber(value: any): boolean {\r\n            return typeof(value) === \"number\" && !isNaN(value);\r\n        }\r\n\r\n        /**\r\n         * 得到对应角度值的sin近似值\r\n         * @param value {number} 角度值\r\n         * @returns {number} sin值\r\n         */\r\n        public static sin(value: number): number {\r\n            let valueFloor: number = Math.floor(value);\r\n            let valueCeil: number = valueFloor + 1;\r\n            let resultFloor: number = NumberUtils.sinInt(valueFloor);\r\n            if (valueFloor == value) {\r\n                return resultFloor;\r\n            }\r\n            let resultCeil: number = NumberUtils.sinInt(valueCeil);\r\n\r\n            return (value - valueFloor) * resultCeil + (valueCeil - value) * resultFloor;\r\n        }\r\n\r\n        private static sinInt(value: number): number {\r\n            value = value % 360;\r\n            if (value < 0) {\r\n                value += 360;\r\n            }\r\n            return egret_sin_map[value];\r\n        }\r\n\r\n        /**\r\n         * 得到对应角度值的cos近似值\r\n         * @param value {number} 角度值\r\n         * @returns {number} cos值\r\n         * @version Egret 2.4\r\n         * @platform Web,Native\r\n         * @language zh_CN\r\n         */\r\n        public static cos(value: number): number {\r\n            let valueFloor: number = Math.floor(value);\r\n            let valueCeil: number = valueFloor + 1;\r\n            let resultFloor: number = NumberUtils.cosInt(valueFloor);\r\n            if (valueFloor == value) {\r\n                return resultFloor;\r\n            }\r\n            let resultCeil: number = NumberUtils.cosInt(valueCeil);\r\n\r\n            return (value - valueFloor) * resultCeil + (valueCeil - value) * resultFloor;\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         *\r\n         * @param value\r\n         * @returns\r\n         */\r\n        private static cosInt(value: number): number {\r\n            value = value % 360;\r\n            if (value < 0) {\r\n                value += 360;\r\n            }\r\n            return egret_cos_map[value];\r\n        }\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nlet egret_sin_map = {};\r\n/**\r\n * @private\r\n */\r\nlet egret_cos_map = {};\r\n/**\r\n * @private\r\n */\r\nlet DEG_TO_RAD: number = Math.PI / 180;\r\n\r\nfor (let NumberUtils_i = 0; NumberUtils_i < 360; NumberUtils_i++) {\r\n    egret_sin_map[NumberUtils_i] = Math.sin(NumberUtils_i * DEG_TO_RAD);\r\n    egret_cos_map[NumberUtils_i] = Math.cos(NumberUtils_i * DEG_TO_RAD);\r\n}\r\negret_sin_map[90] = 1;\r\negret_cos_map[90] = 0;\r\negret_sin_map[180] = 0;\r\negret_cos_map[180] = -1;\r\negret_sin_map[270] = -1;\r\negret_cos_map[270] = 0;\r\n\r\n//对未提供bind的浏览器实现bind机制\r\nif (!Function.prototype.bind) {\r\n    Function.prototype.bind = function (oThis) {\r\n        if (typeof this !== \"function\") {\r\n            // closest thing possible to the ECMAScript 5 internal IsCallable function\r\n            //egret.$error(1029);\r\n            console.error(1029);\r\n        }\r\n\r\n        let aArgs = Array.prototype.slice.call(arguments, 1),\r\n            fToBind = this,\r\n            fNOP = function () {\r\n            },\r\n            fBound = function () {\r\n                return fToBind.apply(this instanceof fNOP && oThis\r\n                    ? this\r\n                    : oThis,\r\n                    aArgs.concat(Array.prototype.slice.call(arguments)));\r\n            };\r\n\r\n        fNOP.prototype = this.prototype;\r\n        fBound.prototype = new fNOP();\r\n\r\n        return fBound;\r\n    };\r\n}","/**\r\n * Created by cjb on 2018-05-01\r\n */\r\nmodule core.base {\r\n    export class Init {\r\n        constructor() {\r\n            var canvas: Canvas = wx.createCanvas();\r\n            var renderContext = canvas.getContext(\"webgl\");\r\n            \r\n            if (renderContext) {\r\n                this.initWebGl(renderContext);\r\n            } else {\r\n                this.initCanvas(canvas);\r\n            }\r\n        }\r\n        \r\n        private initWebGl(ctx: WebGLRenderingContext): void {\r\n            GlobalData.Ctx0 = ctx;\r\n        }\r\n        \r\n        private initCanvas(canvas: Canvas): void {\r\n            var ctx = canvas.getContext(\"2d\");\r\n            GlobalData.Ctx1 = ctx;\r\n            GlobalData.CtxType = 1;\r\n        }\r\n    }\r\n}\r\n","/**\r\n * Created by cjb on 2018-05-01\r\n */\r\n\r\nmodule display.component {\r\n    import Stage = display.Stage;\r\n    \r\n    export class VImage extends DisplayObject {\r\n        private _img: HTMLImageElement;\r\n        \r\n        constructor(imgSrc: string) {\r\n            super();\r\n            this._img = new Image();\r\n            this._img.src = imgSrc;\r\n            this._img.onload = this.onLoad;\r\n        }\r\n        \r\n        private onLoad(): void {\r\n            this.width = this.width === undefined ? this._img.width : this.width;\r\n            this.height = this.height === undefined ? this._img.height : this.height;\r\n        }\r\n        \r\n        protected renderSelf() {\r\n            var parentViewport = Stage.viewport;\r\n            var viewport = this._viewport;\r\n            \r\n            if (parentViewport.containsRect(viewport)) {\r\n                this.drawImage(0, 0, viewport.width, viewport.height, viewport.x, viewport.y, viewport.width, viewport.height);\r\n                return;\r\n            }\r\n            let sx: number, sy: number, sWidth: number, sHeight: number;\r\n            let dx: number, dy: number, dWidth: number, dHeight: number;\r\n            if (viewport.left < parentViewport.left) {\r\n                sx = parentViewport.left - viewport.left;\r\n                dx = parentViewport.left;\r\n                sWidth = dWidth = viewport.right - parentViewport.left;\r\n            } else {\r\n                sx = 0;\r\n                dx = viewport.x;\r\n                sWidth = dWidth = viewport.width;\r\n            }\r\n            if (viewport.top < parentViewport.top) {\r\n                sy = parentViewport.top - viewport.top;\r\n                dy = parentViewport.top;\r\n                sHeight = dHeight = viewport.bottom - parentViewport.top;\r\n            } else {\r\n                sy = 0;\r\n                dy = viewport.y;\r\n                sHeight = dHeight = viewport.height;\r\n            }\r\n            if (viewport.right > parentViewport.right) {\r\n                sWidth = dWidth = parentViewport.right - viewport.left;\r\n            }\r\n            if (viewport.bottom > parentViewport.bottom) {\r\n                sHeight = dHeight = parentViewport.bottom - viewport.top;\r\n            }\r\n            this.drawImage(sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\r\n        }\r\n        \r\n        private drawImage(sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) {\r\n            var ctx = GlobalData.Ctx1;\r\n            \r\n            // if (this.scaleChange && (this.scaleX !== 1 || this.scaleY !== 1)) {\r\n            //     ctx.translate(0, dHeight + Stage.viewport.y * 2);\r\n            //     ctx.scale(this.scaleX, this.scaleY);\r\n            //     ctx.drawImage(this._img, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\r\n            //     ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n            //     return;\r\n            // }\r\n            ctx.drawImage(this._img, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\r\n        }\r\n    }\r\n}\r\n"]}